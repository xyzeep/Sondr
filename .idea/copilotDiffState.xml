<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/softwarica/sondr/view/pages/SearchPage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/softwarica/sondr/view/pages/SearchPage.kt" />
              <option name="originalContent" value="package com.softwarica.sondr.view.pages&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;&#10;import androidx.compose.ui.Alignment&#10;&#10;import androidx.compose.ui.Modifier&#10;&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.graphics.Color&#10;&#10;import androidx.compose.ui.graphics.SolidColor&#10;&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;&#10;@Composable&#10;fun SearchPage() {&#10;&#10;    var query by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column (&#10;        modifier = Modifier&#10;            .background(color = Color(0xff121212))&#10;            .fillMaxSize()&#10;            .padding(16.dp ),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;&#10;    ){&#10;            Row (&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center&#10;&#10;                )&#10;            {&#10;                SearchBar(&#10;                    query = query,&#10;                    onQueryChange = { query = it }&#10;                )&#10;            }&#10;&#10;    }&#10;&#10;}&#10;&#10;&#10;@Composable&#10;fun SearchBar(&#10;    query: String,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.run {&#10;            fillMaxWidth()&#10;                .height(44.dp)&#10;                .padding(horizontal = 0.dp)&#10;                .background(&#10;                    color = Color(0xFF313B4D),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                )&#10;                .border(&#10;                    width = 1.dp,&#10;                    color = Color.White,&#10;                    shape = RoundedCornerShape(8.dp)&#10;                )&#10;                .padding(horizontal = 12.dp, vertical = 8.dp)&#10;        },&#10;        contentAlignment = Alignment.CenterStart&#10;    ) {&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            BasicTextField(&#10;                value = query,&#10;                onValueChange = onQueryChange,&#10;                singleLine = true,&#10;                textStyle = TextStyle(&#10;                    color = Color.White,&#10;                    fontSize = 20.sp&#10;&#10;                ),&#10;                cursorBrush = SolidColor(Color.White),&#10;                modifier = Modifier.weight(1f),&#10;                decorationBox = { innerTextField -&gt;&#10;                    if (query.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;Search for posts or users&quot;,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            fontSize = 20.sp&#10;                        )&#10;                    }&#10;                    innerTextField()&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.softwarica.sondr.view.pages&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.softwarica.sondr.model.UserModel&#10;import com.softwarica.sondr.repository.UserRepositoryImpl&#10;&#10;@Composable&#10;fun SearchPage() {&#10;    var query by remember { mutableStateOf(&quot;&quot;) }&#10;    var searchResults by remember { mutableStateOf&lt;List&lt;UserModel&gt;&gt;(emptyList()) }&#10;    val userRepository = UserRepositoryImpl(LocalContext.current)&#10;&#10;    LaunchedEffect(query) {&#10;        if (query.isNotEmpty()) {&#10;            userRepository.usersRef.orderByChild(&quot;username&quot;).startAt(query).endAt(query + &quot;\uf8ff&quot;).get()&#10;                .addOnSuccessListener { snapshot -&gt;&#10;                    val users = mutableListOf&lt;UserModel&gt;()&#10;                    snapshot.children.forEach { childSnapshot -&gt;&#10;                        childSnapshot.getValue(UserModel::class.java)?.let { users.add(it) }&#10;                    }&#10;                    searchResults = users&#10;                }&#10;        } else {&#10;            searchResults = emptyList()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .background(color = Color(0xff121212))&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        SearchBar(&#10;            query = query,&#10;            onQueryChange = { query = it }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(searchResults) { user -&gt;&#10;                UserSearchResult(user = user)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UserSearchResult(user: UserModel) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color(0xFF1E1E1E), RoundedCornerShape(8.dp))&#10;            .padding(12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Color(0xFF313B4D)),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;User Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;&#10;        Column {&#10;            Text(&#10;                text = user.username,&#10;                style = TextStyle(&#10;                    color = Color.White,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = user.bio,&#10;                style = TextStyle(&#10;                    color = Color.White.copy(alpha = 0.7f),&#10;                    fontSize = 14.sp&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SearchBar(&#10;    query: String,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.run {&#10;            fillMaxWidth()&#10;                .height(44.dp)&#10;                .padding(horizontal = 0.dp)&#10;                .background(&#10;                    color = Color(0xFF313B4D),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                )&#10;                .border(&#10;                    width = 1.dp,&#10;                    color = Color.White,&#10;                    shape = RoundedCornerShape(8.dp)&#10;                )&#10;                .padding(horizontal = 12.dp, vertical = 8.dp)&#10;        },&#10;        contentAlignment = Alignment.CenterStart&#10;    ) {&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            BasicTextField(&#10;                value = query,&#10;                onValueChange = onQueryChange,&#10;                singleLine = true,&#10;                textStyle = TextStyle(&#10;                    color = Color.White,&#10;                    fontSize = 20.sp&#10;&#10;                ),&#10;                cursorBrush = SolidColor(Color.White),&#10;                modifier = Modifier.weight(1f),&#10;                decorationBox = { innerTextField -&gt;&#10;                    if (query.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;Search for posts or users&quot;,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            fontSize = 20.sp&#10;                        )&#10;                    }&#10;                    innerTextField()&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>